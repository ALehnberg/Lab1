=== Laboration 1, del 2/2 ===

OBS! Denna instruktion är preliminär och kan komma att uppdateras inför vecka 2!

Läs labbkriterierna längst ner på sidan innan ni fortsätter!

I denna laborationsuppgift är tanken att ni ska fortsätta på den lösning ni
gjort i del 1. Vi ska fokusera oss på overloading, runtime-typer och reflection.

Se till att noga läsa igenom instruktionerna och att följa de regler och krav
som labbdokumentet föreskriver. Börja med att kolla igenom hela labbdokumentet
och se vad som krävs för att få godkänt, samt med att ladda ner de filer som
behövs.

Koden ni skriver i denna labb kommer senare att användas i Laboration 2.

Börja med att klona repot https://github.com/niklasbroberg/DIT952-lab1, ifall ni
inte redan gjort det i del 1. Annars kan ni ta fram er lösning från lab 1 del 1
och fortsätta därifrån. Notera att om ni inte är klara eller fått godkänt på
del 1 bör ni göra detta först.

== Uppgift a) ==

Börja med att skapa en ny bilklass Scania och lägg den i filen Scania.java i samma mapp.

En Scania har följande konstruktorvärden:

  nrDoors = 2;
  color = Color.red;
  enginePower = 200;
  modelName = "Scania";

Scania ska införlivas i er arvs-hierarki från tidigare och ha följande extra fält:

  private boolean bedIsDown;
  private int bedDegree;
	
Bed i fältnamnen motsvarar flaket på lastbilen. Följande förhållanden ska gälla,
och ni bör override:a lämpliga metoder för att se till att de alltid gäller:

- bedIsDown ska sättas till true om bedDegree är 0 och vara false annars.
- bedDegree kan inte vara lägre än 0 eller högre än 70.
- bedisDown kan endast vara false ifall currentSpeed är 0 (lastbilen står still)

Lägg till följande metoder och implementera det namnet antyder:

  public int getBedDegree();
  public bool bedIsDown();
  public void lowerBed(); // Sänker flaket 1 grad
  public void liftBed(); // Lyfter flaket 1 grad
  public void liftBed(int degrees); // Lyfter flaket degrees grader (positivt
                                    // och negativt). En overload-metod
  public void liftBed(boolean position); // maxvinkel ifall true, helt nere
                                         // ifall false. En overload-metod
  public void honk(); // Skriver ut "HONK HONK!"

Lägg allt i Scania.java och skriv Javadoc för klassen och fälten. Gör minst ett
JUnit-test i er Testklass.

== Uppgift b) ==

Denna uppgift kräver att ni bekantar er med reflection.

Skapa en main-metod som skriver ut klassens namn, metoder och medlemsvariabler
via reflection för de bilklasser ni skapat (Saab, Volvo, Scania).

== Uppgift c) ==

I main-metoden från föregående uppgift, skapa bilar på följande vis:

  Foo volvo = new Volvo240();
  Foo saab = new Saab95();

där Foo är namnet på någon lämplig supertyp till båda bilarna från er tidigare kod.
Notera att Foo ska vara lika i båda deklarationerna.

Skapa en serie av statements där volvoA och saabA anropar samma metoder
i exakt samma ordning, men där deras variabler får olika värden.
Hur kan man åstadkomma detta och varför går det?

T ex:

  volvo.metodA(arg1, ..., argn);
  saab.metodA(arg1, ..., argn);
  volvo.metodB(arg1, ..., argn);
  saab.metodB(arg1, ..., argn);
  ...
  // skriv ut något fält som båda ärver, men som har olika värden.

== Labbkriterier ==
- Det är absolut förbjudet att dela, kopiera eller använda kod från varandra på
något sätt.

- För att få godkänt på labben gör ni muntliga redovisningar. Gruppen gör detta
samtidigt, men alla gruppmedlemmar kommer ställas frågor
var och en för sig. Så se till att ni hänger med i laborationen; fråga om hjälp
ifall ni fastnar.
